'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace daWebService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="DataAccessWSSoap", [Namespace]:="http://tempuri.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(MarshalByRefObject)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(SqlParameter()))>  _
    Partial Public Class DataAccessWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckConnectionWSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SelectCommandWSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertCommandWSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCommandWSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveCommandWSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCommandWSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WebSyncTableDataUploadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFileListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.MESTraining.My.MySettings.Default.MESTraining_com_menv_gis_DataAccessWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckConnectionWSCompleted As CheckConnectionWSCompletedEventHandler
        
        '''<remarks/>
        Public Event SelectCommandWSCompleted As SelectCommandWSCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertCommandWSCompleted As InsertCommandWSCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCommandWSCompleted As UpdateCommandWSCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCommandWSCompleted As SaveCommandWSCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCommandWSCompleted As DeleteCommandWSCompletedEventHandler
        
        '''<remarks/>
        Public Event WebSyncTableDataUploadCompleted As WebSyncTableDataUploadCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFileListCompleted As GetFileListCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HelloWorld", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(-1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloWorldCompleted(Me, New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckConnectionWS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckConnectionWS(ByVal strConnection As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckConnectionWS", New Object() {strConnection})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckConnectionWSAsync(ByVal strConnection As String)
            Me.CheckConnectionWSAsync(strConnection, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckConnectionWSAsync(ByVal strConnection As String, ByVal userState As Object)
            If (Me.CheckConnectionWSOperationCompleted Is Nothing) Then
                Me.CheckConnectionWSOperationCompleted = AddressOf Me.OnCheckConnectionWSOperationCompleted
            End If
            Me.InvokeAsync("CheckConnectionWS", New Object() {strConnection}, Me.CheckConnectionWSOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckConnectionWSOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckConnectionWSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckConnectionWSCompleted(Me, New CheckConnectionWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectCommandWS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SelectCommandWS(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SelectCommandWS", New Object() {strConnection, strCommand, sqlParameters})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SelectCommandWSAsync(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter)
            Me.SelectCommandWSAsync(strConnection, strCommand, sqlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SelectCommandWSAsync(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter, ByVal userState As Object)
            If (Me.SelectCommandWSOperationCompleted Is Nothing) Then
                Me.SelectCommandWSOperationCompleted = AddressOf Me.OnSelectCommandWSOperationCompleted
            End If
            Me.InvokeAsync("SelectCommandWS", New Object() {strConnection, strCommand, sqlParameters}, Me.SelectCommandWSOperationCompleted, userState)
        End Sub
        
        Private Sub OnSelectCommandWSOperationCompleted(ByVal arg As Object)
            If (Not (Me.SelectCommandWSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SelectCommandWSCompleted(Me, New SelectCommandWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertCommandWS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertCommandWS(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter) As String
            Dim results() As Object = Me.Invoke("InsertCommandWS", New Object() {strConnection, strCommand, sqlParameters})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertCommandWSAsync(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter)
            Me.InsertCommandWSAsync(strConnection, strCommand, sqlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertCommandWSAsync(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter, ByVal userState As Object)
            If (Me.InsertCommandWSOperationCompleted Is Nothing) Then
                Me.InsertCommandWSOperationCompleted = AddressOf Me.OnInsertCommandWSOperationCompleted
            End If
            Me.InvokeAsync("InsertCommandWS", New Object() {strConnection, strCommand, sqlParameters}, Me.InsertCommandWSOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertCommandWSOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertCommandWSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertCommandWSCompleted(Me, New InsertCommandWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCommandWS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCommandWS(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter) As Boolean
            Dim results() As Object = Me.Invoke("UpdateCommandWS", New Object() {strConnection, strCommand, sqlParameters})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCommandWSAsync(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter)
            Me.UpdateCommandWSAsync(strConnection, strCommand, sqlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCommandWSAsync(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter, ByVal userState As Object)
            If (Me.UpdateCommandWSOperationCompleted Is Nothing) Then
                Me.UpdateCommandWSOperationCompleted = AddressOf Me.OnUpdateCommandWSOperationCompleted
            End If
            Me.InvokeAsync("UpdateCommandWS", New Object() {strConnection, strCommand, sqlParameters}, Me.UpdateCommandWSOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCommandWSOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCommandWSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCommandWSCompleted(Me, New UpdateCommandWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveCommandWS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveCommandWS(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter) As Integer
            Dim results() As Object = Me.Invoke("SaveCommandWS", New Object() {strConnection, strCommand, sqlParameters})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveCommandWSAsync(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter)
            Me.SaveCommandWSAsync(strConnection, strCommand, sqlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveCommandWSAsync(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter, ByVal userState As Object)
            If (Me.SaveCommandWSOperationCompleted Is Nothing) Then
                Me.SaveCommandWSOperationCompleted = AddressOf Me.OnSaveCommandWSOperationCompleted
            End If
            Me.InvokeAsync("SaveCommandWS", New Object() {strConnection, strCommand, sqlParameters}, Me.SaveCommandWSOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveCommandWSOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCommandWSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCommandWSCompleted(Me, New SaveCommandWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCommandWS", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteCommandWS(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter) As Boolean
            Dim results() As Object = Me.Invoke("DeleteCommandWS", New Object() {strConnection, strCommand, sqlParameters})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteCommandWSAsync(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter)
            Me.DeleteCommandWSAsync(strConnection, strCommand, sqlParameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCommandWSAsync(ByVal strConnection As String, ByVal strCommand As String, ByVal sqlParameters() As SqlParameter, ByVal userState As Object)
            If (Me.DeleteCommandWSOperationCompleted Is Nothing) Then
                Me.DeleteCommandWSOperationCompleted = AddressOf Me.OnDeleteCommandWSOperationCompleted
            End If
            Me.InvokeAsync("DeleteCommandWS", New Object() {strConnection, strCommand, sqlParameters}, Me.DeleteCommandWSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCommandWSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCommandWSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCommandWSCompleted(Me, New DeleteCommandWSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WebSyncTableDataUpload", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub WebSyncTableDataUpload(ByVal intWebSyncLogID As Integer, ByVal strSourceSQLServer As String, ByVal strSourceDatabase As String, ByVal strMasterConnection As String, ByVal strTableName As String, ByVal dsNewOrChanged As System.Data.DataSet)
            Me.Invoke("WebSyncTableDataUpload", New Object() {intWebSyncLogID, strSourceSQLServer, strSourceDatabase, strMasterConnection, strTableName, dsNewOrChanged})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebSyncTableDataUploadAsync(ByVal intWebSyncLogID As Integer, ByVal strSourceSQLServer As String, ByVal strSourceDatabase As String, ByVal strMasterConnection As String, ByVal strTableName As String, ByVal dsNewOrChanged As System.Data.DataSet)
            Me.WebSyncTableDataUploadAsync(intWebSyncLogID, strSourceSQLServer, strSourceDatabase, strMasterConnection, strTableName, dsNewOrChanged, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WebSyncTableDataUploadAsync(ByVal intWebSyncLogID As Integer, ByVal strSourceSQLServer As String, ByVal strSourceDatabase As String, ByVal strMasterConnection As String, ByVal strTableName As String, ByVal dsNewOrChanged As System.Data.DataSet, ByVal userState As Object)
            If (Me.WebSyncTableDataUploadOperationCompleted Is Nothing) Then
                Me.WebSyncTableDataUploadOperationCompleted = AddressOf Me.OnWebSyncTableDataUploadOperationCompleted
            End If
            Me.InvokeAsync("WebSyncTableDataUpload", New Object() {intWebSyncLogID, strSourceSQLServer, strSourceDatabase, strMasterConnection, strTableName, dsNewOrChanged}, Me.WebSyncTableDataUploadOperationCompleted, userState)
        End Sub
        
        Private Sub OnWebSyncTableDataUploadOperationCompleted(ByVal arg As Object)
            If (Not (Me.WebSyncTableDataUploadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WebSyncTableDataUploadCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFileList(ByVal strConnection As String, ByVal strDir As String) As String
            Dim results() As Object = Me.Invoke("GetFileList", New Object() {strConnection, strDir})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFileListAsync(ByVal strConnection As String, ByVal strDir As String)
            Me.GetFileListAsync(strConnection, strDir, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFileListAsync(ByVal strConnection As String, ByVal strDir As String, ByVal userState As Object)
            If (Me.GetFileListOperationCompleted Is Nothing) Then
                Me.GetFileListOperationCompleted = AddressOf Me.OnGetFileListOperationCompleted
            End If
            Me.InvokeAsync("GetFileList", New Object() {strConnection, strDir}, Me.GetFileListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFileListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFileListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFileListCompleted(Me, New GetFileListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class SqlParameter
        Inherits DbParameter
        
        Private compareInfoField As SqlCompareOptions
        
        Private xmlSchemaCollectionDatabaseField As String
        
        Private xmlSchemaCollectionOwningSchemaField As String
        
        Private xmlSchemaCollectionNameField As String
        
        Private forceColumnEncryptionField As Boolean
        
        Private localeIdField As Integer
        
        Private sqlDbTypeField As SqlDbType
        
        Private sqlValueField As Object
        
        Private udtTypeNameField As String
        
        Private typeNameField As String
        
        Private offsetField As Integer
        
        Public Sub New()
            MyBase.New
            Me.forceColumnEncryptionField = false
        End Sub
        
        '''<remarks/>
        Public Property CompareInfo() As SqlCompareOptions
            Get
                Return Me.compareInfoField
            End Get
            Set
                Me.compareInfoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property XmlSchemaCollectionDatabase() As String
            Get
                Return Me.xmlSchemaCollectionDatabaseField
            End Get
            Set
                Me.xmlSchemaCollectionDatabaseField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property XmlSchemaCollectionOwningSchema() As String
            Get
                Return Me.xmlSchemaCollectionOwningSchemaField
            End Get
            Set
                Me.xmlSchemaCollectionOwningSchemaField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property XmlSchemaCollectionName() As String
            Get
                Return Me.xmlSchemaCollectionNameField
            End Get
            Set
                Me.xmlSchemaCollectionNameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute(false)>  _
        Public Property ForceColumnEncryption() As Boolean
            Get
                Return Me.forceColumnEncryptionField
            End Get
            Set
                Me.forceColumnEncryptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LocaleId() As Integer
            Get
                Return Me.localeIdField
            End Get
            Set
                Me.localeIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SqlDbType() As SqlDbType
            Get
                Return Me.sqlDbTypeField
            End Get
            Set
                Me.sqlDbTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SqlValue() As Object
            Get
                Return Me.sqlValueField
            End Get
            Set
                Me.sqlValueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UdtTypeName() As String
            Get
                Return Me.udtTypeNameField
            End Get
            Set
                Me.udtTypeNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TypeName() As String
            Get
                Return Me.typeNameField
            End Get
            Set
                Me.typeNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Offset() As Integer
            Get
                Return Me.offsetField
            End Get
            Set
                Me.offsetField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.FlagsAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum SqlCompareOptions
        
        '''<remarks/>
        None = 1
        
        '''<remarks/>
        IgnoreCase = 2
        
        '''<remarks/>
        IgnoreNonSpace = 4
        
        '''<remarks/>
        IgnoreKanaType = 8
        
        '''<remarks/>
        IgnoreWidth = 16
        
        '''<remarks/>
        BinarySort = 32
        
        '''<remarks/>
        BinarySort2 = 64
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum SqlDbType
        
        '''<remarks/>
        BigInt
        
        '''<remarks/>
        Binary
        
        '''<remarks/>
        Bit
        
        '''<remarks/>
        [Char]
        
        '''<remarks/>
        DateTime
        
        '''<remarks/>
        [Decimal]
        
        '''<remarks/>
        Float
        
        '''<remarks/>
        Image
        
        '''<remarks/>
        Int
        
        '''<remarks/>
        Money
        
        '''<remarks/>
        NChar
        
        '''<remarks/>
        NText
        
        '''<remarks/>
        NVarChar
        
        '''<remarks/>
        Real
        
        '''<remarks/>
        UniqueIdentifier
        
        '''<remarks/>
        SmallDateTime
        
        '''<remarks/>
        SmallInt
        
        '''<remarks/>
        SmallMoney
        
        '''<remarks/>
        Text
        
        '''<remarks/>
        Timestamp
        
        '''<remarks/>
        TinyInt
        
        '''<remarks/>
        VarBinary
        
        '''<remarks/>
        VarChar
        
        '''<remarks/>
        [Variant]
        
        '''<remarks/>
        Xml
        
        '''<remarks/>
        Udt
        
        '''<remarks/>
        Structured
        
        '''<remarks/>
        [Date]
        
        '''<remarks/>
        Time
        
        '''<remarks/>
        DateTime2
        
        '''<remarks/>
        DateTimeOffset
    End Enum
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(DbParameter)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(SqlParameter)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public MustInherit Class MarshalByRefObject
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(SqlParameter)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public MustInherit Class DbParameter
        Inherits MarshalByRefObject
        
        Private dbTypeField As DbType
        
        Private directionField As ParameterDirection
        
        Private isNullableField As Boolean
        
        Private parameterNameField As String
        
        Private precisionField As Byte
        
        Private scaleField As Byte
        
        Private sizeField As Integer
        
        Private sourceColumnField As String
        
        Private sourceColumnNullMappingField As Boolean
        
        Private sourceVersionField As DataRowVersion
        
        Private valueField As Object
        
        Public Sub New()
            MyBase.New
            Me.directionField = ParameterDirection.Input
            Me.parameterNameField = ""
            Me.sourceColumnField = ""
            Me.sourceColumnNullMappingField = false
            Me.sourceVersionField = DataRowVersion.Current
        End Sub
        
        '''<remarks/>
        Public Property DbType() As DbType
            Get
                Return Me.dbTypeField
            End Get
            Set
                Me.dbTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute(ParameterDirection.Input)>  _
        Public Property Direction() As ParameterDirection
            Get
                Return Me.directionField
            End Get
            Set
                Me.directionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsNullable() As Boolean
            Get
                Return Me.isNullableField
            End Get
            Set
                Me.isNullableField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute("")>  _
        Public Property ParameterName() As String
            Get
                Return Me.parameterNameField
            End Get
            Set
                Me.parameterNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Precision() As Byte
            Get
                Return Me.precisionField
            End Get
            Set
                Me.precisionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Scale() As Byte
            Get
                Return Me.scaleField
            End Get
            Set
                Me.scaleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Size() As Integer
            Get
                Return Me.sizeField
            End Get
            Set
                Me.sizeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute("")>  _
        Public Property SourceColumn() As String
            Get
                Return Me.sourceColumnField
            End Get
            Set
                Me.sourceColumnField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute(false)>  _
        Public Property SourceColumnNullMapping() As Boolean
            Get
                Return Me.sourceColumnNullMappingField
            End Get
            Set
                Me.sourceColumnNullMappingField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.ComponentModel.DefaultValueAttribute(DataRowVersion.Current)>  _
        Public Property SourceVersion() As DataRowVersion
            Get
                Return Me.sourceVersionField
            End Get
            Set
                Me.sourceVersionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Value() As Object
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum DbType
        
        '''<remarks/>
        AnsiString
        
        '''<remarks/>
        Binary
        
        '''<remarks/>
        [Byte]
        
        '''<remarks/>
        [Boolean]
        
        '''<remarks/>
        Currency
        
        '''<remarks/>
        [Date]
        
        '''<remarks/>
        DateTime
        
        '''<remarks/>
        [Decimal]
        
        '''<remarks/>
        [Double]
        
        '''<remarks/>
        Guid
        
        '''<remarks/>
        Int16
        
        '''<remarks/>
        Int32
        
        '''<remarks/>
        Int64
        
        '''<remarks/>
        [Object]
        
        '''<remarks/>
        [SByte]
        
        '''<remarks/>
        [Single]
        
        '''<remarks/>
        [String]
        
        '''<remarks/>
        Time
        
        '''<remarks/>
        UInt16
        
        '''<remarks/>
        UInt32
        
        '''<remarks/>
        UInt64
        
        '''<remarks/>
        VarNumeric
        
        '''<remarks/>
        AnsiStringFixedLength
        
        '''<remarks/>
        StringFixedLength
        
        '''<remarks/>
        Xml
        
        '''<remarks/>
        DateTime2
        
        '''<remarks/>
        DateTimeOffset
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum ParameterDirection
        
        '''<remarks/>
        Input
        
        '''<remarks/>
        Output
        
        '''<remarks/>
        InputOutput
        
        '''<remarks/>
        ReturnValue
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Public Enum DataRowVersion
        
        '''<remarks/>
        Original
        
        '''<remarks/>
        Current
        
        '''<remarks/>
        Proposed
        
        '''<remarks/>
        [Default]
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub CheckConnectionWSCompletedEventHandler(ByVal sender As Object, ByVal e As CheckConnectionWSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckConnectionWSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub SelectCommandWSCompletedEventHandler(ByVal sender As Object, ByVal e As SelectCommandWSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SelectCommandWSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub InsertCommandWSCompletedEventHandler(ByVal sender As Object, ByVal e As InsertCommandWSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertCommandWSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub UpdateCommandWSCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCommandWSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCommandWSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub SaveCommandWSCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCommandWSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCommandWSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub DeleteCommandWSCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCommandWSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCommandWSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub WebSyncTableDataUploadCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetFileListCompletedEventHandler(ByVal sender As Object, ByVal e As GetFileListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFileListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
